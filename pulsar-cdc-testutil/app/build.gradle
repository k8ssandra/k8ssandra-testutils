/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the scala Plugin to add support for Scala.
    id 'scala'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
    id 'com.palantir.docker' version '0.33.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use Scala 2.13 in our library project
    implementation 'org.scala-lang:scala-library:2.13.6'

    implementation 'org.slf4j:slf4j-log4j12:1.7.36'

    // Pulsar
    var pulsarVersion = "2.8.1"
    implementation "com.clever-cloud.pulsar4s:pulsar4s-core_2.13:${pulsarVersion}"
    implementation "com.clever-cloud.pulsar4s:pulsar4s-avro_2.13:${pulsarVersion}"
    implementation "org.apache.pulsar:pulsar-client-admin:${pulsarVersion}"

    // Avro
    implementation 'com.sksamuel.avro4s:avro4s-core_2.13:4.0.13'
    implementation "org.apache.avro:avro:1.11.0"

    // Cassandra
    var cassVersion = "4.14.1"
    implementation "com.datastax.oss:java-driver-core:${cassVersion}"
    implementation "com.datastax.oss:java-driver-query-builder:${cassVersion}"
    implementation "com.datastax.oss:java-driver-mapper-runtime:${cassVersion}"

    // Config
    implementation "info.picocli:picocli:4.2.0"

    // Use Scalatest for testing our library
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.scalatest:scalatest_2.13:3.2.9'
    testImplementation 'org.scalatestplus:junit-4-13_2.13:3.2.2.0'

    // Need scala-xml at test runtime
    testRuntimeOnly 'org.scala-lang.modules:scala-xml_2.13:1.2.0'
}

tasks.register('ensureDirectory') {
        mkdir "build/docker"
}

tasks.build {
    dependsOn(generateAvroJava)
}
tasks.dockerPrepare {
    dependsOn(installDist)
}

distributions {
    main {
        distributionBaseName = 'pulsar-cdc-testutil'
    }
}


docker {
    name "hub.docker.com/k8ssandra/testutils:${version}"
    copySpec.from("build/install").into(".")
//    dockerfile file('Dockerfile')
//    files tasks.distTar.outputs, "Dockerfile"
}

application {
    // Define the main class for the application.
    mainClass = 'io.k8ssandra.pulsarcdctestutil.App'
}
